/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.myhome.services.springdatajpa;

import com.myhome.domain.CommunityHouse;
import com.myhome.domain.HouseMember;
import com.myhome.repositories.CommunityHouseRepository;
import com.myhome.repositories.HouseMemberDocumentRepository;
import com.myhome.repositories.HouseMemberRepository;
import com.myhome.services.HouseService;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

/**
 * Provides data access and manipulation for community houses and their members using
 * Spring Data JPA repositories.
 */
@RequiredArgsConstructor
@Service
public class HouseSDJpaService implements HouseService {
  private final HouseMemberRepository houseMemberRepository;
  private final HouseMemberDocumentRepository houseMemberDocumentRepository;
  private final CommunityHouseRepository communityHouseRepository;

  /**
   * Generates a unique identifier using the UUID (Universally Unique Identifier) class,
   * returning it as a string. The identifier is randomly generated, ensuring uniqueness
   * across different systems and applications.
   *
   * @returns a 128-bit universally unique identifier (UUID) in string format.
   */
  private String generateUniqueId() {
    return UUID.randomUUID().toString();
  }

  /**
   * Retrieves all CommunityHouse objects from the database and returns them as a Set,
   * utilizing a HashSet to store unique CommunityHouse instances. The data is fetched
   * from a repository, which is not shown in this code snippet.
   *
   * @returns a set of CommunityHouse entities retrieved from the communityHouseRepository.
   */
  @Override
  public Set<CommunityHouse> listAllHouses() {
    Set<CommunityHouse> communityHouses = new HashSet<>();
    communityHouseRepository.findAll().forEach(communityHouses::add);
    return communityHouses;
  }

  /**
   * Retrieves a paginated list of all community houses from the database and returns
   * them as a set. The function utilizes the `communityHouseRepository` to fetch the
   * data and handles pagination based on the provided `Pageable` object.
   *
   * @param pageable pagination criteria, allowing the retrieval of a specific subset
   * of data from the database.
   *
   * @returns a set of CommunityHouse objects, retrieved from the database using pagination.
   */
  @Override
  public Set<CommunityHouse> listAllHouses(Pageable pageable) {
    Set<CommunityHouse> communityHouses = new HashSet<>();
    communityHouseRepository.findAll(pageable).forEach(communityHouses::add);
    return communityHouses;
  }

  /**
   * Adds house members to a community house with the specified ID, generates unique
   * IDs for the members, associates them with the house and the community house, saves
   * the members and the community house, and returns the saved members.
   *
   * @param houseId identifier for the community house to which the specified members
   * are to be added.
   *
   * @param houseMembers set of house members to be added to a community house with the
   * specified `houseId`.
   *
   * Contain a set of HouseMember objects.
   *
   * @returns a set of saved house members or an empty set if no community house found.
   *
   * The output is a Set of HouseMember objects. Each HouseMember object contains a
   * unique MemberId generated by the `generateUniqueId` method and is associated with
   * a specific CommunityHouse.
   */
  @Override public Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers) {
    Optional<CommunityHouse> communityHouseOptional =
        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);
    return communityHouseOptional.map(communityHouse -> {
      Set<HouseMember> savedMembers = new HashSet<>();
      houseMembers.forEach(member -> member.setMemberId(generateUniqueId()));
      houseMembers.forEach(member -> member.setCommunityHouse(communityHouse));
      houseMemberRepository.saveAll(houseMembers).forEach(savedMembers::add);

      communityHouse.getHouseMembers().addAll(savedMembers);
      communityHouseRepository.save(communityHouse);
      return savedMembers;
    }).orElse(new HashSet<>());
  }

  /**
   * Removes a member from a community house based on the provided house ID and member
   * ID, updates the community house and member repositories accordingly, and returns
   * a boolean indicating whether the removal was successful.
   *
   * @param houseId identifier for the community house from which a member is to be deleted.
   *
   * @param memberId identifier of the member to be removed from the specified house.
   *
   * @returns a boolean indicating whether the member was successfully removed from the
   * community house.
   */
  @Override
  public boolean deleteMemberFromHouse(String houseId, String memberId) {
    Optional<CommunityHouse> communityHouseOptional =
        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);
    return communityHouseOptional.map(communityHouse -> {
      boolean isMemberRemoved = false;
      if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) {
        Set<HouseMember> houseMembers = communityHouse.getHouseMembers();
        for (HouseMember member : houseMembers) {
          if (member.getMemberId().equals(memberId)) {
            houseMembers.remove(member);
            communityHouse.setHouseMembers(houseMembers);
            communityHouseRepository.save(communityHouse);
            member.setCommunityHouse(null);
            houseMemberRepository.save(member);
            isMemberRemoved = true;
            break;
          }
        }
      }
      return isMemberRemoved;
    }).orElse(false);
  }

  /**
   * Returns the details of a community house based on its unique identifier.
   * It retrieves the house details from the repository using the provided house ID.
   * The result is wrapped in an Optional to handle potential null values.
   *
   * @param houseId identifier used to retrieve a specific CommunityHouse object from
   * the repository.
   *
   * @returns an Optional instance containing a CommunityHouse object if found, otherwise
   * an empty Optional.
   */
  @Override
  public Optional<CommunityHouse> getHouseDetailsById(String houseId) {
    return communityHouseRepository.findByHouseId(houseId);
  }

  /**
   * Returns an optional list of house members for the specified house ID, filtered by
   * a pageable query.
   * The result is wrapped in an optional to handle null cases.
   *
   * @param houseId identifier of a house for which house members are to be retrieved.
   *
   * @param pageable pagination criteria for the query, allowing for the retrieval of
   * a specific page of results.
   *
   * @returns an Optional containing a list of HouseMember objects.
   */
  @Override
  public Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable) {
    return Optional.ofNullable(
        houseMemberRepository.findAllByCommunityHouse_HouseId(houseId, pageable)
    );
  }

  /**
   * Retrieves a list of house members associated with houses of a specified user ID,
   * paginated according to the provided `Pageable` object. It uses the `houseMemberRepository`
   * to query the database. The result is wrapped in an `Optional` to handle null cases.
   *
   * @param userId identifier for the user for whom house members are to be retrieved.
   *
   * @param pageable pagination settings for retrieving a subset of the results.
   *
   * @returns an Optional containing a List of HouseMember objects.
   */
  @Override
  public Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId,
      Pageable pageable) {
    return Optional.ofNullable(
        houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)
    );
  }
}
